package com.milaboratory.mixcr.bam;

import com.milaboratory.core.io.sequence.PairedRead;
import com.milaboratory.core.io.sequence.SequenceRead;
import com.milaboratory.core.io.sequence.SingleRead;
import com.milaboratory.core.io.sequence.fastq.PairedFastqWriter;
import com.milaboratory.core.io.sequence.fastq.SingleFastqWriter;
import org.junit.Assert;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Objects;

public class BAMReaderTest {
    // BAM file generated by the following STAR command:
    // ./STAR --runMode alignReads --outSAMunmapped Within --outSAMtype BAM SortedByCoordinate --readFilesCommand cat
    // --genomeDir {path_to_gen}/STARgenome --outFileNamePrefix bam_output/
    // --readFilesIn {path_to_fastq}/fastq1.fastq {path_to_fastq}/fastq2.fastq
    final String BY_COORD_BAM = "bam/sortedByCoord.bam";

    // BAM file generated by the following STAR command:
    // ./STAR --runMode alignReads --outSAMunmapped Within --outSAMtype BAM Unsorted --readFilesCommand cat
    // --genomeDir {path_to_gen}/STARgenome --outFileNamePrefix bam_output/
    // --readFilesIn {path_to_fastq}/fastq1.fastq {path_to_fastq}/fastq2.fastq
    final String UNSORTED_BAM = "bam/unsorted.bam";

    // BAM file generated by the following samtools command:
    // samtools sort -n unsorted.bam -o sortedByName.bam
    final String BY_NAME_BAM = "bam/sortedByName.bam";

    // Corresponding initial fastq files
    final String FASTQ1 = "bam/fastq1.fastq";
    final String FASTQ2 = "bam/fastq2.fastq";

    // BAM files with paired and unpaired (or paired without mate in file) reads at the same time
    final String UNPAIRED_BY_COORD_BAM = "bam/unpairedSortedByCoord.bam";
    final String UNPAIRED_BY_NAME_BAM = "bam/unpairedSortedByName.bam";

    // Corresponding fastq files from samtools or bamUtil
    final String UNPAIRED_FASTQ1 = "bam/unpairedFastq1.fastq";
    final String UNPAIRED_FASTQ2 = "bam/unpairedFastq2.fastq";
    final String UNPAIRED_FASTQ = "bam/unpairedFastq.fastq";


    public int fastqFileHash(File fastq1) throws IOException {
        BufferedReader fastq1Reader = new BufferedReader(new FileReader(fastq1));
        int result = 0;
        String line1;
        while ((line1 = fastq1Reader.readLine()) != null) {
            result ^= line1.hashCode();
        }
        return result;
    }

    public int fastqFilesHash(File fastq1, File fastq2) throws IOException {
        BufferedReader fastq1Reader = new BufferedReader(new FileReader(fastq1));
        BufferedReader fastq2Reader = new BufferedReader(new FileReader(fastq2));
        int result = 0;
        String line1, line2;
        while ((line1 = fastq1Reader.readLine()) != null && (line2 = fastq2Reader.readLine()) != null) {
            result ^= (line1 + line2).hashCode();
        }
        return result;
    }

    public void checkPlural(String[] bamName, String[] fastq1Name, String[] fastq2Name, String[] unpairedFastqName) throws IOException {
        ClassLoader classLoader = getClass().getClassLoader();
        Path[] readers = new Path[bamName.length];
        for (int i = 0; i < bamName.length; i++) {
            readers[i] = Paths.get(Objects.requireNonNull(classLoader.getResource(bamName[i])).getPath());
        }
        try (BAMReader converter = new BAMReader(readers, false, false)) {

            File res_f1 = File.createTempFile("my_r1", ".fastq");
            File res_f2 = File.createTempFile("my_r2", ".fastq");
            File res_fu = File.createTempFile("my_ru", ".fastq");

            SequenceRead read;
            try (PairedFastqWriter wr = new PairedFastqWriter(res_f1, res_f2);
                 SingleFastqWriter swr = new SingleFastqWriter(res_fu)) {
                while ((read = converter.take()) != null) {
                    if (read instanceof PairedRead) {
                        wr.write((PairedRead) read);
                    } else if (read instanceof SingleRead) {
                        swr.write((SingleRead) read);
                    }
                }
            }

            int targetHash = 0;
            for (int i = 0; i < fastq1Name.length; i++) {
                File fastq1File = new File(Objects.requireNonNull(classLoader.getResource(fastq1Name[i])).getFile());
                File fastq2File = new File(Objects.requireNonNull(classLoader.getResource(fastq2Name[i])).getFile());
                targetHash ^= fastqFilesHash(fastq1File, fastq2File);
            }
            if (unpairedFastqName != null) {
                for (String s : unpairedFastqName) {
                    File fastq1File = new File(Objects.requireNonNull(classLoader.getResource(s)).getFile());
                    targetHash ^= fastqFileHash(fastq1File);
                }
            }
            int resultHash = fastqFilesHash(res_f1, res_f2) ^ fastqFileHash(res_fu);
            Assert.assertEquals(targetHash, resultHash);
        }
    }

    @Test
    public void sortedByCoordTest() throws Exception {
        checkPlural(new String[]{BY_COORD_BAM}, new String[]{FASTQ1}, new String[]{FASTQ2}, null);
    }

    @Test
    public void sortedByNameTest() throws Exception {
        checkPlural(new String[]{BY_NAME_BAM}, new String[]{FASTQ1}, new String[]{FASTQ2}, null);
    }

    @Test
    public void UnsortedTest() throws Exception {
        checkPlural(new String[]{UNSORTED_BAM}, new String[]{FASTQ1}, new String[]{FASTQ2}, null);
    }

    @Test
    public void unpairedSortedByCoordTest() throws Exception {
        checkPlural(new String[]{UNPAIRED_BY_COORD_BAM},
                new String[]{UNPAIRED_FASTQ1},
                new String[]{UNPAIRED_FASTQ2},
                new String[]{UNPAIRED_FASTQ});
    }

    @Test
    public void unpairedSortedByNameTest() throws Exception {
        checkPlural(new String[]{UNPAIRED_BY_NAME_BAM},
                new String[]{UNPAIRED_FASTQ1},
                new String[]{UNPAIRED_FASTQ2},
                new String[]{UNPAIRED_FASTQ});
    }

    @Test
    public void combinedTest() throws Exception {
        checkPlural(new String[]{UNPAIRED_BY_NAME_BAM, BY_COORD_BAM},
                new String[]{UNPAIRED_FASTQ1, FASTQ1},
                new String[]{UNPAIRED_FASTQ2, FASTQ2},
                new String[]{UNPAIRED_FASTQ});
    }

}